// <auto-generated />
using System;
using Dot_Net_ECommerceWeb.DBContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Dot_Net_ECommerceWeb.Migrations
{
    [DbContext(typeof(AppDBContext))]
    partial class AppDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Dot_Net_ECommerceWeb.Model.Category", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("CategoryName")
                        .HasColumnType("longtext")
                        .HasColumnName("category_name");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_at");

                    b.Property<string>("ImgLink")
                        .HasColumnType("longtext")
                        .HasColumnName("img_link");

                    b.Property<string>("Status")
                        .HasColumnType("longtext")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("categories");
                });

            modelBuilder.Entity("Dot_Net_ECommerceWeb.Model.Inventories", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("date");

                    b.Property<string>("user_imported")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("user_imported");

                    b.HasKey("id");

                    b.ToTable("inventories");
                });

            modelBuilder.Entity("Dot_Net_ECommerceWeb.Model.InventoryDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<float>("Price")
                        .HasColumnType("float")
                        .HasColumnName("price");

                    b.Property<int?>("ProductId")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("inventory_detail");
                });

            modelBuilder.Entity("Dot_Net_ECommerceWeb.Model.Logs", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("current_value")
                        .HasColumnType("longtext")
                        .HasColumnName("current_value");

                    b.Property<string>("ip_address")
                        .HasColumnType("longtext")
                        .HasColumnName("ip_address");

                    b.HasKey("id");

                    b.ToTable("log");
                });

            modelBuilder.Entity("Dot_Net_ECommerceWeb.Model.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .HasColumnType("longtext")
                        .HasColumnName("address");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("Note")
                        .HasColumnType("longtext")
                        .HasColumnName("note");

                    b.Property<string>("ShipCost")
                        .HasColumnType("longtext")
                        .HasColumnName("shipCost");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("status");

                    b.Property<string>("StatusPayment")
                        .HasColumnType("longtext")
                        .HasColumnName("statusPayment");

                    b.Property<float?>("TotalPrice")
                        .HasColumnType("float")
                        .HasColumnName("total_price");

                    b.Property<string>("TypePayment")
                        .HasColumnType("longtext")
                        .HasColumnName("typePayment");

                    b.Property<string>("TypeShip")
                        .HasColumnType("longtext")
                        .HasColumnName("typeShip");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UserId")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("orders");
                });

            modelBuilder.Entity("Dot_Net_ECommerceWeb.Model.OrderDetail", b =>
                {
                    b.Property<int?>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("order_id");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<double?>("QuantityTotal")
                        .HasColumnType("double")
                        .HasColumnName("quantity_total");

                    b.Property<double?>("TotalPrice")
                        .HasColumnType("double")
                        .HasColumnName("total_price");

                    b.HasKey("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("order_details");
                });

            modelBuilder.Entity("Dot_Net_ECommerceWeb.Model.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<bool?>("Hot")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("hot");

                    b.Property<int?>("ImageProduct")
                        .HasColumnType("int")
                        .HasColumnName("image_product");

                    b.Property<string>("Information")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("information");

                    b.Property<float>("Price")
                        .HasColumnType("float")
                        .HasColumnName("price");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("product_name");

                    b.Property<int>("Sale")
                        .HasColumnType("int")
                        .HasColumnName("sale");

                    b.Property<string>("Status")
                        .HasColumnType("longtext")
                        .HasColumnName("status");

                    b.Property<string>("StatusDeleted")
                        .HasColumnType("longtext")
                        .HasColumnName("status_deleted");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("products");
                });

            modelBuilder.Entity("Dot_Net_ECommerceWeb.Model.ProductImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Img1")
                        .HasColumnType("longtext")
                        .HasColumnName("img_1");

                    b.Property<string>("Img2")
                        .HasColumnType("longtext")
                        .HasColumnName("img_2");

                    b.Property<string>("Img3")
                        .HasColumnType("longtext")
                        .HasColumnName("img_3");

                    b.Property<string>("Img4")
                        .HasColumnType("longtext")
                        .HasColumnName("img_4");

                    b.Property<string>("ImgMain")
                        .HasColumnType("longtext")
                        .HasColumnName("img_main");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.ToTable("product_image");
                });

            modelBuilder.Entity("Dot_Net_ECommerceWeb.Model.User", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .HasColumnType("longtext")
                        .HasColumnName("address");

                    b.Property<string>("Avatar")
                        .HasColumnType("longtext")
                        .HasColumnName("avatar");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("birthday");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("delete_at");

                    b.Property<string>("Email")
                        .HasColumnType("longtext")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .HasColumnType("longtext")
                        .HasColumnName("full_name");

                    b.Property<string>("Gender")
                        .HasColumnType("longtext")
                        .HasColumnName("gender");

                    b.Property<string>("Phone")
                        .HasColumnType("longtext")
                        .HasColumnName("phone");

                    b.Property<string>("Role")
                        .HasColumnType("longtext")
                        .HasColumnName("role");

                    b.Property<string>("Status")
                        .HasColumnType("longtext")
                        .HasColumnName("status");

                    b.Property<string>("TypeLogin")
                        .HasColumnType("longtext")
                        .HasColumnName("type_login");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<string>("password")
                        .HasColumnType("longtext")
                        .HasColumnName("password");

                    b.Property<string>("username")
                        .HasColumnType("longtext")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.ToTable("users");
                });

            modelBuilder.Entity("Dot_Net_ECommerceWeb.Model.InventoryDetails", b =>
                {
                    b.HasOne("Dot_Net_ECommerceWeb.Model.Inventories", "Inventories")
                        .WithMany("inventory_details")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dot_Net_ECommerceWeb.Model.Product", "product")
                        .WithMany("InventoryDetail")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inventories");

                    b.Navigation("product");
                });

            modelBuilder.Entity("Dot_Net_ECommerceWeb.Model.Order", b =>
                {
                    b.HasOne("Dot_Net_ECommerceWeb.Model.User", "user")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("Dot_Net_ECommerceWeb.Model.OrderDetail", b =>
                {
                    b.HasOne("Dot_Net_ECommerceWeb.Model.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dot_Net_ECommerceWeb.Model.Product", "Product")
                        .WithMany("OrderDetail")
                        .HasForeignKey("ProductId");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Dot_Net_ECommerceWeb.Model.Product", b =>
                {
                    b.HasOne("Dot_Net_ECommerceWeb.Model.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Dot_Net_ECommerceWeb.Model.ProductImage", b =>
                {
                    b.HasOne("Dot_Net_ECommerceWeb.Model.Product", "Product")
                        .WithOne("ProductImage")
                        .HasForeignKey("Dot_Net_ECommerceWeb.Model.ProductImage", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Dot_Net_ECommerceWeb.Model.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Dot_Net_ECommerceWeb.Model.Inventories", b =>
                {
                    b.Navigation("inventory_details");
                });

            modelBuilder.Entity("Dot_Net_ECommerceWeb.Model.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("Dot_Net_ECommerceWeb.Model.Product", b =>
                {
                    b.Navigation("InventoryDetail");

                    b.Navigation("OrderDetail");

                    b.Navigation("ProductImage");
                });

            modelBuilder.Entity("Dot_Net_ECommerceWeb.Model.User", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
